#!/bin/sh

###############################
###   common function  
###############################
function ca_get_nonmaster_driver_status ()
{
   if [[ -f $1 ]]; then
      local driverStatus=`grep "Driver container state has changed to RUN" $1 | awk '{print $NF}'`
      #echo "driver success to submit: $driverStatus"
      echo $driverStatus
   else
      echo "error: ca_get_nonmaster_driver_status: please specify a file." 1>&2
      return 1
   fi
}
function ca_get_nonmaster_driver_stderr ()
{
   if [[ -f $1 ]]; then
      local driverid=`grep "Got allocation id=" $1 | awk '{ print $(NF-2) }'`
      local drivername="spark-driver-alloc-"${driverid#*=}".stderr"
      #echo "driver name: $drivername"
      echo ${drivername}
   else
      echo "error: ca_get_nonmaster_driver_stderr: please specify a file."  1>&2
      return 1;
   fi
}
function ca_get_nonmaster_driver_stdout ()
{
   if [[ -f $1 ]]; then
      local driverid=`grep "Got allocation id=" $1 | awk '{ print $(NF-2) }'`
      local drivername="spark-driver-alloc-"${driverid#*=}".stdout"
      #echo "driver name: $drivername" 
      echo ${drivername}
   else
      echo "error: ca_get_nonmaster_driver_stdout: please specify a file." 1>&2
      return 1;
   fi
}
function ca_get_akka_driver_status ()
{
   if [[ -f $1 ]]; then
      local driverStatus=`grep "driver-" $1 | awk '/State of/ {print $NF}'`
      #echo "driver success to submit: $driverStatus"
      echo $driverStatus
   else
      echo "error: ca_get_akka_driver_status: please specify a file." 1>&2
      return 1;
   fi 
} 
function ca_get_restapi_driver_status ()
{
   if [[ -f $1 ]]; then 
      local driverStatus=`cat $1 | awk '/\"success\"/ {print $3}'`
      #echo "driver success to submit: $driverStatus"
      echo $driverStatus
   else
      echo "error: ca_get_restapi_driver_status: please specify a file." 1>&2
      return 1;
   fi
}
function ca_get_akka_driver_name ()
{
   if [[ -f $1 ]]; then
      local drivername=`grep "driver-" $1 | awk '/State of/  {print $(NF-2)}'`
      #echo "driver name: $drivername" 
      echo $drivername
   else
      echo "error: ca_get_akka_driver_name: please specify a file." 1>&2
      return 1;
   fi
}
function ca_get_restapi_driver_name ()
{
   if [[ -f $1 ]]; then
     local drivername=`sed 's/\"//g' $1 | sed 's/,//g' | awk '/submissionId/  {print $3}'`
     #echo "driver name: $drivername" 
     echo $drivername
   else
      echo "error: ca_get_restapi_driver_name: please specify a file." 1>&2
      return 1;
   fi
}
function ca_find_by_key_word ()
{
   if [[ ! -f $1 || -z $2 ]]; then
      echo "error: ca_find_by_key_word: please specify file name and key word to look up." 1>&2
      return 1;
   fi
   local findresult=`grep "$2" $1`
   #echo "find by key word: $findresult"
   echo $findresult
}
function ca_assert_num_gt ()
{
  if [[ "$#" -ne 3 || -z "$1" || -z "$2" || -z "$3" ]]; then
     echo "usage: ./ca_assert_num_gt 1)variable, 2)threshold, 3)fail reason." 1>&2
  elif [[ "$1" -gt "$2" ]]; then
     fw_report_save_case_result_in_file $global_case_name "Pass" 
  else
     fw_report_save_case_result_in_file $global_case_name "Fail" "$3" 
  fi
}
function ca_assert_num_ge ()
{
  if [[ "$#" -ne 3 || -z "$1" || -z "$2" || -z "$3" ]]; then
     echo "usage: ./ca_assert_num_ge 1)variable, 2)threshold, 3)fail reason." 1>&2
  elif [[ "$1" -ge "$2" ]]; then
     fw_report_save_case_result_in_file $global_case_name "Pass" 
  else
     fw_report_save_case_result_in_file $global_case_name "Fail" "$3"    
  fi
}
function ca_assert_num_eq ()
{
  if [[ "$#" -ne 3 || -z "$1" || -z "$2" || -z "$3" ]]; then
     echo "usage: ./ca_assert_num_eq 1)variable, 2)threshold, 3)fail reason." 1>&2
  elif [[ "$1" -eq "$2" ]]; then
     fw_report_save_case_result_in_file $global_case_name "Pass" 
  else
     fw_report_save_case_result_in_file $global_case_name "Fail" "$3"    
  fi
}
function ca_assert_num_ne ()
{
  if [[ "$#" -ne 3 || -z "$1" || -z "$2" || -z "$3" ]]; then
     echo "usage: ./ca_assert_num_ne 1)variable, 2)threshold, 3)fail reason." 1>&2
  elif [[ "$1" -ne "$2" ]]; then
     fw_report_save_case_result_in_file $global_case_name "Pass" 
  else
     fw_report_save_case_result_in_file $global_case_name "Fail" "$3"    
  fi
}
function ca_assert_num_lt ()
{
  if [[ "$#" -ne 3 || -z "$1" || -z "$2" || -z "$3" ]]; then
     echo "usage: ./ca_assert_num_lt 1)variable, 2)threshold, 3)fail reason." 1>&2
  elif [[ "$1" -lt "$2" ]]; then
     fw_report_save_case_result_in_file $global_case_name "Pass"
  else
     fw_report_save_case_result_in_file $global_case_name "Fail" "$3"
  fi
}
function ca_assert_num_le ()
{
  if [[ "$#" -ne 3 || -z "$1" || -z "$2" || -z "$3" ]]; then
     echo "usage: ./ca_assert_num_le 1)variable, 2)threshold, 3)fail reason." 1>&2
  elif [[ "$1" -le "$2" ]]; then
     fw_report_save_case_result_in_file $global_case_name "Pass"
  else 
     fw_report_save_case_result_in_file $global_case_name "Fail" "$3"    
  fi
}
function ca_assert_str_eq ()
{
  if [[ "$#" -ne 3 || -z "$1" || -z "$2" || -z "$3" ]]; then
     echo "usage: ./ca_assert_str_eq 1)variable, 2)threshold, 3)fail reason." 1>&2
  elif [[ "$1" == "$2" ]]; then
     fw_report_save_case_result_in_file $global_case_name "Pass"
  else
     fw_report_save_case_result_in_file $global_case_name "Fail" "$3"
  fi
}
function ca_assert_str_ne ()
{
  if [[ "$#" -ne 3 || -z "$1" || -z "$2" || -z "$3" ]]; then
     echo "usage: ./ca_assert_str_ne 1)variable, 2)threshold, 3)fail reason." 1>&2
  elif [[ "$1" != "$2" ]]; then
     fw_report_save_case_result_in_file $global_case_name "Pass"
  else
     fw_report_save_case_result_in_file $global_case_name "Fail" "$3"
  fi
}
function ca_case_filter_equal ()
{
  if [[ "$#" -ne 3 || -z "$1" || -z "$2" || -z "$3" ]]; then
     echo "usage: ./ca_case_filter_equal  1)global_of_ENV, 2)value_Expected, 3)skip reason." 1>&2
  elif [[ "$1" != "$2" ]]; then
     echo "case skiped, $3."
     fw_report_save_case_result_in_file $global_case_name "Skip" "$3"
     exit 1;
  else
     echo "case filter was meeted: $1 == $2."
  fi
}
function ca_case_filter_notequal ()
{
  if [[ "$#" -ne 3 || -z "$1" || -z "$2" || -z "$3" ]]; then
     echo "usage: ./ca_case_filter_notequal  1)global_of_ENV, 2)value_notExpected, 3)skip reason." 1>&2
  elif [[ "$1" == "$2" ]]; then
     echo "case skiped, $3."
     fw_report_save_case_result_in_file $global_case_name "Skip" "$3"
     exit 1;
  else
     echo "case filter was meeted: $1 != $2."
  fi
}
function ca_filter_only_gpfs ()
{
  ca_case_filter_equal "$DIST_FILE_SYSTEM" GPFS "case designed only for GPFS. DIST_FILE_SYSTEM != GPFS" 
}
function ca_filter_only_hdfs ()
{
  ca_case_filter_equal "$DIST_FILE_SYSTEM" HDFS "case designed only for HDFS. DIST_FILE_SYSTEM != HDFS"
}
function ca_filter_only_singleHost ()
{
  ca_case_filter_equal "$HOST_NUM" 1 "case designed only for single host cluser. HOST_NUM != 1"
}
function ca_filter_only_multipleHost ()
{
  ca_case_filter_notequal "$HOST_NUM" 1 "case designed only for multiple host cluser. HOST_NUM == 1"
}
function ca_spark_shell_run_sleep ()
{
  if [[ "$#" -ne 3 && "$#" -ne 4 ]]; then
    echo -e "usage: ca_spark_shell_run_sleep: ca_spark_shell_run_sleep taskNumber taskRunningTime taskType <end_condition>\n  \
                    the valid value of taskType is 'sync' and 'async'"  1>&2
    return 1
  fi

  local taskNum=$1
  local taskRunTime=$2
  local taskType=""
  if [[ "$3" == "async" ]]; then
     taskType="countAsync"
  elif [[ "$3" == "sync" ]]; then
     taskType="count"
  else
     echo "error: ca_spark_shell_run_sleep: invalid taskType, neither 'sync' nor 'async'." 1>&2
     return 1
  fi
  local end_condition=${4:-"onStageCompleted: stageId(0)"}

  expect<<- END
  spawn $SPARK_HOME/bin/spark-shell
  set timeout -1
  expect "scala>"
  send "var numTasks = ${taskNum}\n"
  expect "scala>"
  send "var f = sc.parallelize(1 to numTasks, numTasks).map { i => Thread.sleep(${taskRunTime}); i }.${taskType}()\n"
  expect "${end_condition}"
  exit
END
}
function ca_spark_shell_run_wordcount ()
{
if [[ "$#" -ne 2 ]]; then
  echo "usage: ./0 input output"  1>&2
  exit 1
fi

local inputFile=$1
local outputDir=$2
echo $inputFile
echo $outputDir

expect<<- END
spawn $SPARK_HOME/bin/spark-shell
set timeout -1
expect "scala>"
send "val inputFile = sc.textFile(\"${inputFile}\")\r"
expect "scala>"
send "val counts = inputFile.flatMap(line => line.split(\" \")).map(word => (word, 1)).reduceByKey(_ + _);\r"
expect "scala>"
send "counts.toDebugString\r"
expect "scala>"
send "counts.cache()\r"
expect "scala>"
send "counts.collect().foreach(println)\r"
expect "scala>"
send "counts.saveAsTextFile(\"${outputDir}\")\r"
expect "scala>"
send "\n"
exit
END
}
function ca_spark_pyspark_run_sleep ()
{
if [[ "$#" -ne 2 ]]; then
  echo "usage: ca_spark_pyspark_run_sleep taskNumber taskRunningTime" 1>&2
  exit 1
fi

local taskNum=$1
local taskRunTime=$2

expect<<- END
spawn $SPARK_HOME/bin/pyspark
set timeout -1
expect ">>>"
send "import time\n"
expect ">>>"
send "sc.parallelize(xrange(1, 10), ${taskNum}).map(lambda x: time.sleep(${taskRunTime})).count()\n"
expect "onStageCompleted: stageId(0)"
exit
END
}
function ca_assert_file_contain_key_word ()
{
  if [[ "$#" -ne 3 || -z "$1" || -z "$2" || -z "$3" ]]; then
     echo "usage: ./ca_assert_file_contain_key_word 1)file 2)keyword 3)fail reason." 1>&2
     return 1
  elif [[ ! -f "$1" ]]; then 
     echo "error: ./ca_assert_file_contain_key_word $1 is not a valid file." 1>&2
     return 1
  fi
  local resultFind=`grep "$2" "$1"`
  if [[ -n $resultFind ]]; then
     fw_report_save_case_result_in_file $global_case_name "Pass"
  else
     fw_report_save_case_result_in_file $global_case_name "Fail" "$3"
  fi
}
function ca_assert_file_notcontain_key_word ()
{
  if [[ "$#" -ne 3 || -z "$1" || -z "$2" || -z "$3" ]]; then
     echo "usage: ./ca_assert_file_notcontain_key_word 1)file 2)keyword 3)fail reason." 1>&2
     return 1
  elif [[ ! -f "$1" ]]; then
     echo "error: ./ca_assert_file_notcontain_key_word: $1 is not a valid file." 1>&2
     return 1
  fi
  local resultFind=`grep "$2" "$1"`
  if [[ -z $resultFind ]]; then
     fw_report_save_case_result_in_file $global_case_name "Pass"
  else
     fw_report_save_case_result_in_file $global_case_name "Fail" "$3"
  fi
}
function ca_get_kill_driver_status ()
{
   if [[ -f $1 ]]; then
      local driverStatus=`cat $1 | awk '/\"success\"/ {print $3}'`
      #echo "driver success to submit: $driverStatus"
      echo $driverStatus
   else
      echo "error: ca_get_kill_driver_status: please specify a file." 1>&2
      return 1;
   fi
}

function ca_stop_shuffle_service_by_ego_service ()
{
   local currEgosh=`which egosh|grep "egosh$"`
   if [[ -z "$currEgosh" ]]; then
      echo "error: ca_stop_shuffle_service_by_ego_service: no egosh be found." 1>&2
      return 1;
   fi
   ca_enable_shuffle_service
   egosh service stop SPARKSS >> /dev/null
}
function ca_start_shuffle_service_by_ego_service ()
{
   ca_kill_shuffle_service_process
   sleep 3
   local currEgosh=`which egosh|grep "egosh$"`
   if [[ -z "$currEgosh" ]]; then
      echo "error: ca_start_shuffle_service_by_ego_service: no egosh be found." 1>&2
      return 1;
   fi
   ca_enable_shuffle_service
   egosh service start SPARKSS >> /dev/null
   sleep 8
}
function ca_kill_shuffle_service_process ()
{
    local proc_id=`ps -ux |grep Shuffle|grep -v grep|grep $SPARK_HOME`
    if [ -n "$proc_id" ]; then
        ps -ux |grep Shuffle|grep -v grep|grep $SPARK_HOME|awk '{ print $2 }'|xargs kill -9
    fi
}
function ca_start_shuffle_service_by_script ()
{
    if [[ "$#" -ne 1 || -z "$1" ]]; then
     echo "usage: ./ca_start_shuffle_service_by_script  1)tmpout file." 1>&2
     return 1;
    fi
    ca_enable_shuffle_service
    $SPARK_HOME/bin/spark-class org.apache.spark.deploy.ego.EGOShuffleService &>> $1 &
    sleep 30
    kill %1
}
function ca_assert_file_exist_in_hdfs ()
{
  if [[ "$#" -ne 3 || -z "$1" || -z "$2" || -z "$3" ]]; then
     echo "usage: ./ca_assert 1)Dir path to exist file 2)key word of file name 3)fail reason." 1>&2
     return 1;
  fi
  local outputDir=$1
  local filename=$2
  local resultFind=`$HADOOP_HOME/bin/hadoop fs -ls $outputDir`
  if [[ $resultFind =~ "$filename" ]]; then
     fw_report_save_case_result_in_file $global_case_name "Pass"
  #   echo "pass"
  else
     fw_report_save_case_result_in_file $global_case_name "Fail" "$3"
  #  echo "failed"
  fi
}
function ca_assert_case_pass ()
{
   fw_report_save_case_result_in_file $global_case_name "Pass"
}
function ca_assert_case_fail ()
{
  if [[ "$#" -ne 1 || -z "$1" ]]; then
     echo "usage: ./ca_assert_case_fail 1)fail reason." 1>&2
     return 1
  fi
  fw_report_save_case_result_in_file $global_case_name "Fail" "$1"
}
function ca_find_keyword_timeout ()
{
  if [ $# -le 2 ]; then
    echo "usage: ca_find_keyword_timeout <file> <keyword> <timeout>" 1>&2
    return 1
  fi

  local filename=${1:-''}
  local keyword=${2:-''}
  local timeout=${3:-1}

  if [ ! -f $filename ]; then
    echo "the file $filename does not exist"
    return 1
  fi

  if [ -z "$keyword" ]; then
    echo "the keyword $keyword should not blank"
    return 1
  fi

  if [ $timeout -le 0 ]; then
    echo "the timeout $timeout should be greate and equal to 1"
    return 1
  fi

  while [ $timeout -ne 0 ];do
    grep "${keyword}" ${filename}
    [ $? -eq 0 ] && break
    sleep 1
    local timeout=$(( $timeout - 1 ))
  done
}
function ca_kill_process_by_SPARK_HOME ()
{
  if [[ "$#" -ne 1 || -z "$1" ]]; then
     echo "usage: ./ca_kill_process 1)Key for process to be killed." 1>&2
  fi
  local proc_id=`ps -ux |grep "$1"|grep -v grep|grep $SPARK_HOME`
    if [ -n "$proc_id" ]; then
        ps -ux |grep "$1"|grep -v grep|grep $SPARK_HOME|awk '{ print $2 }'|xargs kill
        echo "$1 has been killed"
    else
        echo "$1 does not exist"
        return 1;
    fi
}
function ca_kill_process_by_EGO_TOP ()
{
  if [[ "$#" -ne 1 || -z "$1" ]]; then
     echo "usage: ./ca_kill_process 1)Key for process to be killed." 1>&2
  fi
  local proc_id=`ps -ux |grep "$1"|grep -v grep|grep $EGO_TOP`
    if [ -n "$proc_id" ]; then
        ps -ux |grep "$1"|grep -v grep|grep $EGO_TOP|awk '{ print $2 }'|xargs kill
        echo "$1 has been killed"
    else
        echo "$1 does not exist"
        return 1;
    fi
}

function ca_keep_check_in_file
{
if [[ "$#" -ne 4 || -z "$1" || ! -f "$2" || -z "$3" || -z "$4" ]]; then
     echo "usage: ./ca_keep_check_in_file  1)key, 2)file, 3)integlobal_sec, 4)timeout_sec." 1>&2
     return 1
fi
local resultFind=`grep "$1" "$2"`
SECONDS=0
while [[ "$SECONDS" -le "$4" && -z "$resultFind" ]]; do
#    echo "$SECONDS"
    sleep $3
    resultFind=`grep "$1" "$2"`
done

if [ -n "$resultFind" ]; then
    echo "$1 has been found in $2"
else
    echo "Timeout! Can't find $1 in $2 in $4 secs "
    return
fi
}
function ca_check_cleanup ()
{
if [[ ! -d $1 || ! -x $1 ]]; then
  echo "fail;usage: ./ca_check_cleanup 1)sparklocaldir"
  return 1;
else
  local tmp_local_dir=$1
fi

for tmpfile in `ls $tmp_local_dir`; do
  case $tmpfile in
    driver-*|blockmgr-*|spark-* )
       echo "fail;$tmp_local_dir/$tmpfile"
       return 1;;
    app-* )
       for tmpappfile in `ls $tmp_local_dir/$tmpfile/`; do
           case $tmpappfile in
              *_lock|*_cache  )
                #do nothing
                ;;
              * )
                echo "fail;$tmp_local_dir/$tmpfile/$tmpappfile"
                return 1;;
           esac
      done;;
   * )
       echo "fail;$tmp_local_dir/$tmpfile"
       return 1;;
  esac
done
#no invalid file
echo "success;none"
return 0;
}

function ca_get_driver_id ()
{
  if [ $# -ne 1 ]; then
    echo "usage: ca_get_driver_id <output>" 1>&2
    return 1
  fi

  local file=${1:-''}
  local keyword="ClientEndpoint: Driver successfully submitted"
  if [ ! -f $file ]; then
    echo "error: ca_get_driver_id: the file $file does not exists" 1>&2
    return 1
  fi

  echo $(ca_find_keyword_timeout "$file" "$keyword" 30  |  awk '{print $NF}')
}

function ca_kill_spark_app ()
{
  if [ $# -ne 2 ]; then
    echo "usage: ca_kill_spark_app <driver id> <master:port>" 1>&2
    return 1
  fi

  local driver_id=${1:-''}
  local master="spark://${2:-'${SYM_MASTER_HOST}:6066'}" # port should be rest port, default is 6066

  if [ -z $driver_id ]; then
    echo "error:the driver id is blank" 1>&2
    return 1
  fi

  $SPARK_HOME/bin/spark-submit --kill $driver_id --master $master
  [ $? -eq 0 ] || echo ""
}
function ca_update_to_spark_default ()
{
   if [[ "$#" -ne 2 || -z "$1" || -z "$2" ]]; then
      echo "usage: ./ca_update_to_spark_default envName envValue" 1>&2
      return 1;
   elif [[ ! -f $SPARK_CONF_DIR/spark-defaults.conf ]]; then
      echo "error: ./ca_update_to_spark_default: please make sure $SPARK_CONF_DIR/spark-defaults.conf is exist." 1>&2
      return 1;
   fi
   local envName=$1
   local envValue=$2
   #below grep cmd must have a spcace in the end
   local OLD_SETTING_DEF=$(grep "^$envName" $SPARK_CONF_DIR/spark-defaults.conf || echo "")
   if [ -z "$OLD_SETTING_DEF" ]; then
       local lines=`cat $SPARK_CONF_DIR/spark-defaults.conf|wc -l`
       if [ $lines -ne 0 ]; then
           sed -i --follow-symlinks "\$a$envName $envValue" $SPARK_CONF_DIR/spark-defaults.conf
       else
          # "$lines -eq 0"
          echo "$envName $envValue" >> $SPARK_CONF_DIR/spark-defaults.conf
       fi
   else
       sed -i --follow-symlinks -e "s#^$envName=#\#$envName=#g" $SPARK_CONF_DIR/spark-defaults.conf
       sed -i --follow-symlinks -e "s#^$envName #\#$envName #g" $SPARK_CONF_DIR/spark-defaults.conf
       sed -i --follow-symlinks "\$a$envName $envValue" $SPARK_CONF_DIR/spark-defaults.conf
   fi
}
function ca_update_to_spark_env ()
{
   if [[ "$#" -ne 2 || -z "$1" || -z "$2" ]]; then
      echo "usage: ./ca_update_to_spark_env envName envValue" 1>&2
      return 1;
   elif [[ ! -f $SPARK_CONF_DIR/spark-env.sh ]]; then
      echo "error: ./ca_update_to_spark_env: please make sure $SPARK_CONF_DIR/spark-env.sh is exist." 1>&2
      return 1;
   fi
   local envName=$1
   local envValue=$2
   local OLD_SETTING_DEF=`cat $SPARK_CONF_DIR/spark-env.sh | grep "^$envName="`
   if [ -z "$OLD_SETTING_DEF" ]; then
       local lines=`cat $SPARK_CONF_DIR/spark-env.sh|wc -l`
       if [ $lines -ne 0 ]; then
           sed -i --follow-symlinks "\$a$envName=$envValue" $SPARK_CONF_DIR/spark-env.sh
       else
           echo "$envName=$envValue" >> $SPARK_CONF_DIR/spark-env.sh
       fi
   else
       sed -i --follow-symlinks -e "s#^$envName=#\#$envName=#g" $SPARK_CONF_DIR/spark-env.sh
       sed -i --follow-symlinks "\$a$envName=$envValue" $SPARK_CONF_DIR/spark-env.sh
   fi
}
function ca_comment_out_in_spark_default ()
{
  if [[ "$#" -ne 1 || -z "$1" ]]; then
      echo "usage: ./ca_comment_out_in_spark_default envName" 1>&2
      return 1;
  fi
  local envName=$1
  local OLD_SETTING_DEF=$(grep "^$envName" $SPARK_CONF_DIR/spark-defaults.conf || echo "")
  if [ -n "$OLD_SETTING_DEF" ]; then
       sed -i --follow-symlinks -e "s#^$envName=#\#$envName=#g" $SPARK_CONF_DIR/spark-defaults.conf
       sed -i --follow-symlinks -e "s#^$envName #\#$envName #g" $SPARK_CONF_DIR/spark-defaults.conf
  fi
}
function ca_comment_out_in_spark_env ()
{
  if [[ "$#" -ne 1 || -z "$1" ]]; then
      echo "usage: ./ca_comment_out_in_spark_env envName" 1>&2
      return 1;
  fi
  local envName=$1
  local OLD_SETTING_DEF=$(grep "^$envName" $SPARK_CONF_DIR/spark-defaults.conf || echo "")
  if [ -n "$OLD_SETTING_DEF" ]; then
       sed -i --follow-symlinks -e "s#^$envName=#\#$envName=#g" $SPARK_CONF_DIR/spark-defaults.conf
  fi
}
function ca_get_master_ego_client_name ()
{
   local currEgosh=`which egosh|grep "egosh$"`
   if [[ -z "$currEgosh" ]]; then
      echo "error: ca_get_master_ego_client_name: no egosh be found." 1>&2
      return 1;
   fi
   egosh alloc list -ll | awk -F ',' '{print $3}'|grep "SPARK_RESMGR" | sed 's/"//g'
}
function ca_get_nomaster_driver_client_name ()
{
   local currEgosh=`which egosh|grep "egosh$"`
   if [[ -z "$currEgosh" ]]; then
      echo "error: ca_get_nomaster_driver_client_name: no egosh be found." 1>&2
      return 1;
   fi
   egosh alloc list -ll | awk -F ',' '{print $3}'|grep "EGOCLIENT" | sed 's/"//g'
}
function ca_get_nomaster_executor_client_name ()
{
   local currEgosh=`which egosh|grep "egosh$"`
   if [[ -z "$currEgosh" ]]; then
      echo "error: ca_get_nomaster_executor_client_name: no egosh be found." 1>&2
      return 1;
   fi
   egosh alloc list -ll | awk -F ',' '{print $3}'|grep "SPARKDRIVER" | sed 's/"//g'
}


